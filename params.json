{"name":"Jsr-mocks","tagline":"a mock shim for javascript remoting","body":"jsr-mocks\r\n=========\r\n\r\na mock shim for javascript remoting\r\n\r\nUse to test local versions of single page salesforce apps without deploying to server\r\n\r\nintallation\r\n===========\r\n```bower install jsr-mocks```\r\njsr-mocks will expect a global object named ```configSettings``` with a property called mocks containing local methods that don't need a Salesforce server, and a timeout to simulate jsr load times.\r\n```html\r\n<head>\r\n\r\n\t<link rel=\"stylesheet\" href=\"/static/css/main.css\" />\r\n</head>\r\n\r\n<div id=\"ready\" class=\"ready\">I am ready already</div>\r\n<div id=\"ready2\" class=\"ready\"><img src=\"http://s25.postimage.org/ykwiwxw23/ajax_loader_2.gif\" alt=\"loading\"/></div>\r\n<div id=\"ready3\" class=\"ready\"><img src=\"http://s25.postimage.org/ykwiwxw23/ajax_loader_2.gif\" alt=\"loading\"/></div>\r\n<script src=\"/static/bower_components/jquery/dist/jquery.js\"></script>\r\n<script src=\"/static/js/myOtherModule.js\"></script>\r\n<!-- first resolve VF variables into configSettings, our only global object -->\r\n<script>\r\nvar configSettings = {\r\n\tjsr: {\r\n\t\tmyFunction :'{!$RemoteAction.MyCustomController.myFunction}',\r\n\t\tmyOtherFunction :'{!$RemoteAction.MyCustomController.myOtherFunction}'\r\n\t},\r\n\tmocks :{\r\n\t\t'{!$RemoteAction.MyCustomController.myFunction}' : {\r\n\t\t\ttimeout : 2000, //2 seconds with inline callback\r\n\t\t\tmethod : function(args){   \r\n\t\t\t\tconsole.log('args',args);\r\n\t\t\t\treturn { message:  args[1]}\r\n\t\t\t}\r\n\t\t},\r\n\t\t'{!$RemoteAction.MyCustomController.myOtherFunction}' : {\r\n\t\t\ttimeout : 3000, //3 seconds with named callback function\r\n\t\t\tmethod : myCallback\r\n\t\t}\r\n\t}\r\n}; \r\n\r\nfunction myCallback(args){\r\n\tconsole.log('args',args);\r\n\treturn { message:  args[1] + ' says the other callback'}\r\n}\r\n\t\r\n</script>\r\n<!-- since this is not a VF page, we load a shim library instead for JSR calls -->\r\n<script src=\"/static/bower_components/jsr-mocks/dist/jsr-mocks.provider.js\"></script>\r\n<!-- now our main script can call JSR methods in VF and mock methods in HTML Page with same syntax -->\r\n<script src=\"/static/js/main.js\"></script>\r\n\r\n```\r\n\r\nmain.js can now look like this\r\n\r\n```javascript\r\n\r\nangular.module('myModule', ['jsrMocks']) //inject dependency\r\n  .config(function ($stateProvider, $urlRouterProvider, jsrMocksProvider){\r\n    jsrMocksProvider.setMocks(configSettings.mocks);//point to global config variable (see html)\r\n});\r\n```\r\nNow you can use the newly provided jsr method\r\n\r\n```javascript\r\njsr({\r\n\tmethod: configSettings.remoteActions.communityUserId, //required\r\n        args: [patient.id],  //only required if function expects arguments\r\n        options : {buffer: true, escape: true, timeout: 30000} //optional\r\n}).then(function(communityUserId) {\r\n        if (communityUserId) {\r\n            patientTaskModal.patient.communityUserId = communityUserId;\r\n            patientTaskModal.patientIsCommunityUser = true;\r\n        }\r\n        patientTaskModal.ready = true;\r\n});\r\n```\r\nor factories can just include the jsrMocks object and override Visualforce selectively\r\n```javascript\r\n'use strict';\r\n\r\nangular.module('myModule').factory('PatientFactory',  PatientFactory );\r\n\r\nfunction PatientFactory($q, $rootScope, $log, jsrMocks) {\r\n    \r\n\t//insert the shim\r\n    var Visualforce = jsrMocks;\r\n\r\n\tvar factory = {\r\n\t\tGetPatient : GetPatient\r\n\t};\r\n\r\n\treturn factory;\r\n\r\n\tfunction GetPatient (patientId) {\r\n        var deferred = $q.defer();\r\n        \r\n        //always use namespace-safe jsr invocations\r\n        Visualforce.remoting.Manager.invokeAction(\r\n            configSettings.remoteActions.getPatient,\r\n            patientId,//this is the first argument to jsr method\r\n            function(result, event) {\r\n                $rootScope.$apply(function() {\r\n                    if (event.status) {\r\n                    \tdeferred.resolve(result);\r\n                    } else {\r\n                    \tdeferred.reject(event);\r\n                    }\r\n                });\r\n            }\r\n        );\r\n\t\t//always return a promise when making async calls\r\n        return deferred.promise;\r\n\t}\r\n\r\n\r\n\r\n\t\r\n}\r\n\r\n\r\n\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}